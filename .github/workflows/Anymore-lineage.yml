name: Anymore Lineage

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE:
        description: 'Kernel source URL'
        required: true
        default: 'https://github.com/muhdhaniff55/android_kernel_xiaomi_vayu_lineage.git'
      KERNEL_BRANCH:
        description: 'Kernel branch'
        required: true
        default: 'modi'
      KERNEL_NAME:
        description: 'Kernel/zip name'
        required: true
        default: 'Anymore+'
      CONFIG_FILE:
        description: 'Config file (You can put multiple configs separated by space)'
        required: true
        default: 'vayu_defconfig'
      TOOLCHAIN_URL:
        description: "Clone URL of your toolchain or tarball URL"
        required: true
        default: 'https://raw.githubusercontent.com/ZyCromerZ/Clang/main/Clang-main-link.txt'
      ANYKERNEL:
        description: "Clone URL of your AnyKernel including branch"
        required: true
        default: 'https://github.com/muhdhaniff55/AnyKernel3.git -b anothermaster'

jobs:
  Kernel:
    runs-on: ubuntu-latest
    permissions: write-all
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}

    steps:
      - name: Set-up environment
        run: |
          rm -rf ${{ github.workspace }}/*
          sudo apt-get update
          sudo apt-get install -y build-essential bc lld gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev llvm
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache python2 python2-dev
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar cpio jq
          sudo apt-get install -y device-tree-compiler

      - name: Cloning Kernel Source
        run: |
          git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_BRANCH }} ${{ github.workspace }}

      - name: Cloning libufdt
        run: |
          git clone https://android.googlesource.com/platform/system/libufdt ${{ github.workspace }}/libufdt
          
      - name: GCC Shit
        run: |
          wget https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/961622e926a1b21382dba4dd9fe0e5fb3ee5ab7c.tar.gz -O gcc-aarch64.tar.gz
            tar -xzf gcc-aarch64.tar.gz -C ${{ github.workspace }}/GCC64
            rm gcc-aarch64.tar.gz
          wget https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/cb7b3ac1b7fdb49474ff68761909934d1142f594.tar.gz -O gcc-arm.tar.gz
            tar -xzf gcc-arm.tar.gz -C ${{ github.workspace }}/GCC32
            rm gcc-arm.tar.gz
          
      - name: Cloning Toolchain
        run: |
          TOOLCHAIN_URL="${{ github.event.inputs.TOOLCHAIN_URL }}"
          mkdir -p ${{ github.workspace }}/toolchain

          if [[ $TOOLCHAIN_URL == *.txt ]]; then
            actual_url=$(curl -s "$TOOLCHAIN_URL")
            curl -L "$actual_url" -o toolchain.tar.gz
            tar -xzf toolchain.tar.gz -C ${{ github.workspace }}/toolchain
            rm toolchain.tar.gz
          elif [[ "$TOOLCHAIN_URL" == *.tar.gz || "$TOOLCHAIN_URL" == *.tar.bz2 || "$TOOLCHAIN_URL" == *.tar.xz ]]; then
            curl -L "$TOOLCHAIN_URL" -o toolchain.tar.gz
            tar -xzf toolchain.tar.gz -C ${{ github.workspace }}/toolchain
            rm toolchain.tar.gz
          else
            git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.TOOLCHAIN_URL }} ${{ github.workspace }}/toolchain
          fi

      - name: Set-up Cache
        id: cache-out
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/out
          key: ${{ github.event.inputs.KERNEL_SOURCE }}-out-

      - name: Start Compilation
        run: |
          export TZ='Asia/Kuala_Lumpur'

          objdir="${{ github.workspace }}/out"
          anykernel="${{ github.workspace }}/anykernel"
          clang_dir="${{ github.workspace }}/toolchain"
          MKDTBOIMG="${{ github.workspace }}/libufdt/utils/src/mkdtboimg.py"
          kernel_name="${{ github.event.inputs.KERNEL_NAME }}"
          zip_name="${kernel_name}-$(date +"%d-%m-%Y").zip"
          arch="arm64"
          GCC64_DIR="${{ github.workspace }}/GCC64"
          GCC32_DIR="${{ github.workspace }}/GCC32"
          export KBUILD_BUILD_HOST=Newehh
          export KBUILD_BUILD_USER=home

          export PATH="${clang_dir}/bin:$GCC64_DIR/bin:$GCC32_DIR/bin:$PATH"

          make_defconfig() {
            start=$(date +"%s")
            make -s ARCH=${arch} O=${objdir} ${{ github.event.inputs.CONFIG_FILE }} -j$(nproc --all)
          }

          compile() {
            cd "${{ github.workspace }}"
            make -j$(nproc --all) \
              O=out \
              ARCH=${arch} \
              SUBARCH=arm64 \
              DTC_EXT=dtc \
              CC=clang \
              CXX=clang++ \
              CLANG_TRIPLE=aarch64-linux-gnu- \
              CROSS_COMPILE=aarch64-linux-gnu- \
              CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
              CROSS_COMPILE_COMPAT=arm-linux-gnueabi- \
              LD=ld.lld \
              AR=llvm-ar \
              NM=llvm-nm \
              STRIP=llvm-strip \
              OBJCOPY=llvm-objcopy \
              OBJDUMP=llvm-objdump \
              READELF=llvm-readelf \
              LLVM=1 \
              LLVM_IAS=1
              $1
          }

          completion() {
            cd "${objdir}"
            compiled_image="arch/arm64/boot/Image"
            compiled_dtbo="arch/arm64/boot/dtbo.img"

            git clone -q ${{ github.event.inputs.ANYKERNEL }} "$anykernel"
            cp "${compiled_image}" "${{ github.workspace }}"
            cp "${compiled_dtbo}" "${{ github.workspace }}"

            mv -f "${compiled_image}" "$anykernel/Image"
            mv -f "${compiled_dtbo}" "$anykernel/dtbo.img"
            cat arch/arm64/boot/dts/qcom/sm8150-v2*.dtb > "$anykernel/dtb"
            cd "$anykernel"
            zip -r AnyKernel.zip *
            mv -- "AnyKernel.zip" "$zip_name"
            mv -- "$anykernel/$zip_name" "${{ github.workspace }}/$zip_name"
            rm -rf "$anykernel"
            end=$(date +"%s")
            diff=$((end - start))
            echo -e "BUILD COMPLETED IN ${diff} SECONDS"
          }

          make_defconfig
          compile
          completion

          cd "${{ github.workspace }}"

          # Set-up file info
          zip_file=$(find . -name '${{ github.event.inputs.KERNEL_NAME }}*.zip' -print -quit)
          echo "ZIP_FILE=$zip_file" >> $GITHUB_ENV
          echo "ZIP_NAME=$(basename "$zip_file" .zip)" >> $GITHUB_ENV
          echo "RELEASE_DATE=$(TZ='Asia/Kuala_Lumpur' date +'%B %-d, %Y %H:%M')" >> $GITHUB_ENV
          echo "DTBO=${{ github.workspace }}/dtbo.img" >> $GITHUB_ENV
          echo "IMAGE=${{ github.workspace }}/Image" >> $GITHUB_ENV

        continue-on-error: false

      - name: Upload files to repository releases page
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ github.workspace }}/*.dtb
            ${{ env.ZIP_FILE }}
            ${{ env.DTBO }}
            ${{ env.IMAGE }}
          name: ${{ env.ZIP_NAME }}
          tag_name: ${{ github.run_id }}
          body: |
            Released on ${{ env.RELEASE_DATE }}
