name: Anymore Lineage v2

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE:
        description: 'Kernel source URL'
        required: true
        default: 'https://github.com/muhdhaniff55/android_kernel_xiaomi_vayu_lineage.git'
      KERNEL_BRANCH:
        description: 'Kernel branch'
        required: true
        default: 'modi'
      KERNEL_NAME:
        description: 'Kernel/zip name'
        required: true
        default: 'Anymore+'
      CONFIG_FILE:
        description: 'Config file (You can put multiple configs separated by space)'
        required: true
        default: 'vayu_defconfig'
      TOOLCHAIN_URL:
        description: "Clone URL of your toolchain"
        required: true
        default: 'https://raw.githubusercontent.com/XSans0/WeebX-Clang/main/release/19.x/link.txt'
      ANYKERNEL:
        description: "Clone URL of your AnyKernel"
        required: true
        default: 'https://github.com/muhdhaniff55/AnyKernel3.git -b anothermaster'

jobs:
  Build_Kernel:
    runs-on: ubuntu-latest
    permissions: write-all
    defaults:
      run:
       shell: bash
       working-directory: ${{ github.workspace }}

    steps:
      - name: Set-up environment
        run: |
          rm -rf ${{ github.workspace }}/*
          sudo apt-get update
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache python2 python2-dev
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar cpio jq
          
      - name: Cloning Kernel Source
        run: git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_BRANCH }} ${{ github.workspace }}

      - name: Set-up Toolchain
        run: |
         TOOLCHAIN_URL="${{ github.event.inputs.TOOLCHAIN_URL }}"
          mkdir -p ${{ github.workspace }}/toolchain

          if [[ $TOOLCHAIN_URL == *.txt ]]; then
            actual_url=$(curl -s "$TOOLCHAIN_URL")
            curl -L "$actual_url" -o toolchain.tar.gz
            tar -xzf toolchain.tar.gz -C ${{ github.workspace }}/toolchain
            rm toolchain.tar.gz
          elif [[ "$TOOLCHAIN_URL" == *.tar.gz || "$TOOLCHAIN_URL" == *.tar.bz2 || "$TOOLCHAIN_URL" == *.tar.xz ]]; then
            curl -L "$TOOLCHAIN_URL" -o toolchain.tar.gz
            tar -xzf toolchain.tar.gz -C ${{ github.workspace }}/toolchain
            rm toolchain.tar.gz
          else
            git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.TOOLCHAIN_URL }} ${{ github.workspace }}/toolchain
          fi
         
      - name: Start Compilation
        run: |
         objdir="${{ github.workspace }}/out"
         anykernel="${{ github.workspace }}/anykernel"
         clang_dir="${{ github.workspace }}/toolchain"
         kernel_name="${{ github.event.inputs.KERNEL_NAME }}"
         zip_name="${kernel_name}-$(date +"%d-%m-%Y-%H%M").zip"
         output_dir=${{ github.workspace }}/compiled
         
         export PATH="${clang_dir}/bin:$PATH"
         
         mkdir -p $output_dir
         
         make_defconfig() {
            start=$(date +"%s")
            make -s ARCH=arm64 O=${objdir} ${{ github.event.inputs.CONFIG_FILE }} -j$(nproc --all)
         }
         
         compile() {
            cd "${{ github.workspace }}"
            
            make -j$(nproc --all) \
            O=${objdir} \
            ARCH=arm64 \
            CC=clang \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
            CROSS_COMPILE_COMPAT=arm-linux-gnueabi- \
            AR=llvm-ar \
            LLVM_NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            LD=ld.lld \
            NM=llvm-nm \
            LLVM=1 \
            LLVM_IAS=1
         }
         
         completion() {
            cd "${objdir}"
            compiled_image="arch/arm64/boot/Image"
            compiled_gz_image="arch/arm64/boot/Image.gz"
            compiled_gz_dtb="arch/arm64/boot/Image.gz-dtb"
            compiled_dtbo="arch/arm64/boot/dtbo.img"
            qcom_dtb="arch/arm64/boot/dts/vendor/qcom"
           
         if [[ -f ${compiled_image} || -f ${compiled_gz_image} || -f ${compiled_gz_dtb} ]]; then
              git clone -q ${{ github.event.inputs.ANYKERNEL }} "$anykernel"

              if [[ -f "${compiled_image}" ]]; then
                  cp -f "${compiled_image}" "$anykernel/Image" || true
                  cp -f "${compiled_image}" "$output_dir/Image" || true
              elif [[ -f "${compiled_gz_image}" ]]; then
                  cp -f "${compiled_gz_image}" "$anykernel/Image.gz" || true
                  cp -f "${compiled_gz_image}" "$output_dir/Image.gz" || true
              elif [[ -f "${compiled_gz_dtb}" ]]; then
                  cp -f "${compiled_gz_dtb}" "$anykernel/Image.gz-dtb" || true
                  cp -f "${compiled_gz_dtb}" "$output_dir/Image.gz-dtb" || true
              fi
              
              if [[ -f "${compiled_dtbo}" ]]; then
                  cp -f "${compiled_dtbo}" "$anykernel/dtbo.img" || true
                  cp -f "${compiled_dtbo}" "$output_dir/dtbo.img" || true
              fi
              
              if ls ${qcom_dtb}/sm8150-v2*.dtb 1> /dev/null 2>&1; then
                  cp -f ${qcom_dtb}/sm8150-v2*.dtb "$output_dir" || true
              fi

              cd "$anykernel"
              zip -r AnyKernel.zip *
              mv -- "AnyKernel.zip" "$zip_name"
              mv -- "$anykernel/$zip_name" "$output_dir/$zip_name"
              rm -rf "$anykernel"
            
              end=$(date +"%s")
              diff=$((end - start))
              echo -e "BUILD COMPLETED IN ${diff} SECONDS"
         else
              echo "ERROR: Some output is missing!"
              exit 1
         fi
         }
         
         make_defconfig
         compile
         completion
         
         # Set-up file info
         zip_file=$(find $output_dir -name '${{ github.event.inputs.KERNEL_NAME }}*.zip' -print -quit)
         echo "ZIP_NAME=$(basename "$zip_file" .zip)" >> $GITHUB_ENV
         echo "RELEASE_DATE=$(date +'%B %-d, %Y %H:%M')" >> $GITHUB_ENV

        continue-on-error: false

      - name: Upload files to repository releases page
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ github.workspace }}/compiled/*
          name: ${{ env.ZIP_NAME }}
          tag_name: ${{ github.run_id }}
          body: |
           Released on ${{ env.RELEASE_DATE }}
