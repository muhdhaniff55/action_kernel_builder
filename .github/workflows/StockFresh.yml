name: StockFresh

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE:
        description: 'Kernel source URL'
        required: true
        default: 'https://github.com/mkcs121/android_kernel_xiaomi_vayu.git'
      KERNEL_BRANCH:
        description: 'Kernel branch'
        required: true
        default: 'stock'
      KERNEL_NAME:
        description: 'Kernel/zip name'
        required: true
        default: 'StockFresh'
      CONFIG_FILE:
        description: 'Config file (You can put multiple configs separated by space)'
        required: true
        default: 'vayu_user_defconfig'
      ANYKERNEL:
        description: "Clone URL of your AnyKernel including branch"
        required: true
        default: 'https://github.com/GXC2356/AnyKernel3.git -b master'
    
jobs:
  Kernel:
    runs-on: ubuntu-latest
    permissions: write-all
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}

    steps:
      - name: Set-up environment
        run: |
          rm -rf ${{ github.workspace }}/*
          sudo apt-get update
          sudo apt-get install -y build-essential bc lld gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev llvm
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache python2 python2-dev
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar cpio jq
          sudo apt-get install -y device-tree-compiler

      - name: Cloning Kernel Source
        run: |
          git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_BRANCH }} ${{ github.workspace }}

      - name: KernelSU Setup
        run: |
          if [ -d "./KernelSU" ]; then
            rm -rf "./KernelSU"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi

          sed -i '/^CONFIG_KPROBES=/s/.*/#CONFIG_KPROBES is not set/' arch/arm64/configs/${{ github.event.inputs.CONFIG_FILE }}
          sed -i '/^CONFIG_HAVE_KPROBES=/s/.*/#CONFIG_HAVE_KPROBES is not set/' arch/arm64/configs/${{ github.event.inputs.CONFIG_FILE }}
          sed -i '/^CONFIG_KPROBE_EVENTS=/s/.*/#CONFIG_KPROBE_EVENTS is not set/' arch/arm64/configs/${{ github.event.inputs.CONFIG_FILE }}

      - name: Set-up Cache
        id: cache-out
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/out
          key: ${{ github.event.inputs.KERNEL_SOURCE }}-out-

      - name: Start Compilation
        run: |
          export TZ='Asia/Kuala_Lumpur'

          objdir="${{ github.workspace }}/out"
          anykernel="${{ github.workspace }}/anykernel"
          kernel_name="${{ github.event.inputs.KERNEL_NAME }}"
          zip_name="${kernel_name}-$(date +"%d-%m-%Y").zip"
          arch="arm64"
          export KBUILD_BUILD_HOST=Newehh
          export KBUILD_BUILD_USER=home

          make_defconfig() {
              start=$(date +"%s")
              make -s ARCH=${arch} O=${objdir} ${{ github.event.inputs.CONFIG_FILE }} -j$(nproc --all)
          }

          compile() {
              cd "${{ github.workspace }}"

              make -j$(nproc --all) \
                  O=out \
                  ARCH=${arch} \
                  SUBARCH=arm64 \
                  DTC_EXT=dtc \
                  CROSS_COMPILE=aarch64-linux-gnu-    \
                  CC="aarch64-linux-gnu-gcc"   \
                  $1
          }

          completion() {
              cd "${objdir}"
              compiled_image="arch/arm64/boot/Image"
              compiled_dtbo="arch/arm64/boot/dtbo.img"

              git clone -q ${{ github.event.inputs.ANYKERNEL }} "$anykernel"
              cp "${compiled_image}" "${{ github.workspace }}"
              cp "${compiled_dtbo}" "${{ github.workspace }}"

              mv -f "${compiled_image}" "$anykernel/Image"
              mv -f "${compiled_dtbo}" "$anykernel/dtbo.img"
              cat arch/arm64/boot/dts/qcom/*.dtb > "$anykernel/dtb"
              cd "$anykernel"
              zip -r AnyKernel.zip *
              mv -- "AnyKernel.zip" "$zip_name"
              mv -- "$anykernel/$zip_name" "${{ github.workspace }}/$zip_name"
              rm -rf "$anykernel"
              end=$(date +"%s")
              diff=$((end - start))
              echo -e "BUILD COMPLETED IN ${diff} SECONDS"
          }

          make_defconfig
          compile
          completion

          cd "${{ github.workspace }}"

          zip_file=$(find . -name '${{ github.event.inputs.KERNEL_NAME }}*.zip' -print -quit)
          echo "ZIP_FILE=$zip_file" >> $GITHUB_ENV
          echo "ZIP_NAME=$(basename "$zip_file" .zip)" >> $GITHUB_ENV
          echo "RELEASE_DATE=$(TZ='Asia/Kuala_Lumpur' date +'%B %-d, %Y %H:%M')" >> $GITHUB_ENV
          echo "DTBO=${{ github.workspace }}/dtbo.img" >> $GITHUB_ENV
          echo "IMAGE=${{ github.workspace }}/Image" >> $GITHUB_ENV

        continue-on-error: false

      - name: Upload files to repository releases page
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ github.workspace }}/*.dtb
            ${{ env.ZIP_FILE }}
            ${{ env.DTBO }}
            ${{ env.IMAGE }}
          name: ${{ env.ZIP_NAME }}
          tag_name: ${{ github.run_id }}
          body: |
            Released on ${{ env.RELEASE_DATE }}
