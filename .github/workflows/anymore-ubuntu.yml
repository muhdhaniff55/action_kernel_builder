name: Anymore Ubuntu

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE:
        description: 'Kernel source URL'
        required: true
        default: 'https://github.com/AnymoreProject/kernel_xiaomi_vayu_upstream.git'
      KERNEL_BRANCH:
        description: 'Kernel branch'
        required: true
        default: 'ksu'
      KERNEL_NAME:
        description: 'Kernel/zip name'
        required: true
        default: 'AnymoreKSU'
      CONFIG_FILE:
        description: 'Config file (You can put multiple configs separated by space)'
        required: true
        default: 'vayu_defconfig'
      ANYKERNEL:
        description: "Clone URL of your AnyKernel including branch"
        required: true
        default: 'https://github.com/muhdhaniff55/AnyKernel3.git -b anothermaster'

jobs:
  Kernel:
    runs-on: ubuntu-latest

    steps:
      - name: Set-up environment
        run: |
          rm -rf ${{ github.workspace }}/*
          sudo apt-get update
          sudo apt-get install -y wget gnupg
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy main" | sudo tee /etc/apt/sources.list.d/llvm-toolchain.list
          sudo apt-get update
          sudo apt-get install -y build-essential bc lld gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev clang
          sudo apt-get install -y curl git ftp lftp libarchive-tools ccache python2 python2-dev
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar cpio jq
          sudo apt-get install -y device-tree-compiler
          sudo apt-get install -y clang-tools libncurses5-dev git-lfs flex bison pkg-config

      - name: Cloning Kernel Source
        run: |
          git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_BRANCH }} ${{ github.workspace }}

      - name: Set-up Cache
        id: cache-out
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/out
          key: ${{ github.event.inputs.KERNEL_SOURCE }}-out-

      - name: Start Compilation
        run: |
          objdir="${{ github.workspace }}/out"
          anykernel="${{ github.workspace }}/anykernel"
          kernel_name="${{ github.event.inputs.KERNEL_NAME }}"
          zip_name="${kernel_name}-$(date +"%d-%m-%Y").zip"
          arch="arm64"
          export KBUILD_BUILD_HOST=AnymoreProject
          export KBUILD_BUILD_USER=t.me

          make_defconfig() {
            start=$(date +"%s")
            make -s ARCH=${arch} O=${objdir} ${{ github.event.inputs.CONFIG_FILE }} -j$(nproc --all)
          }

          compile() {
            cd "${{ github.workspace }}"
            make -j$(nproc --all) \
              O=out \
              ARCH=arm64 \
              CC=clang \
              DTC_EXT=dtc \
              CROSS_COMPILE=aarch64-linux-gnu- \
              LD=ld.lld \
              AR=llvm-ar \
              NM=llvm-nm
          }

          completion() {
            cd "${objdir}"
            compiled_image="arch/arm64/boot/Image"
            compiled_dtbo="arch/arm64/boot/dtbo.img"

            git clone -q ${{ github.event.inputs.ANYKERNEL }} "$anykernel"
            cp "${compiled_image}" "${{ github.workspace }}"
            cp "${compiled_dtbo}" "${{ github.workspace }}"

            mv -f "${compiled_image}" "$anykernel/Image"
            mv -f "${compiled_dtbo}" "$anykernel/dtbo.img"
            cat arch/arm64/boot/dts/qcom/sm8150-v2*.dtb > "$anykernel/dtb"
            cd "$anykernel"
            zip -r AnyKernel.zip *
            mv -- "AnyKernel.zip" "$zip_name"
            mv -- "$anykernel/$zip_name" "${{ github.workspace }}/$zip_name"
            rm -rf "$anykernel"
            end=$(date +"%s")
            diff=$((end - start))
            echo -e "BUILD COMPLETED IN ${diff} SECONDS"
          }

          make_defconfig
          compile
          completion

          cd "${{ github.workspace }}"

          # Set-up file info
          zip_file=$(find . -name '${{ github.event.inputs.KERNEL_NAME }}*.zip' -print -quit)
          echo "ZIP_FILE=$zip_file" >> $GITHUB_ENV
          echo "ZIP_NAME=$(basename "$zip_file" .zip)" >> $GITHUB_ENV
          echo "RELEASE_DATE=$(date +'%B %-d, %Y %H:%M')" >> $GITHUB_ENV
          echo "DTBO=${{ github.workspace }}/dtbo.img" >> $GITHUB_ENV
          echo "IMAGE=${{ github.workspace }}/Image" >> $GITHUB_ENV

      - name: Upload files to repository releases page
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ github.workspace }}/*.dtb
            ${{ env.ZIP_FILE }}
            ${{ env.DTBO }}
            ${{ env.IMAGE }}
          name: ${{ env.ZIP_NAME }}
          tag_name: ${{ github.run_id }}
          body: |
            Released on ${{ env.RELEASE_DATE }}
