name: Aosp Build Kernel

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE:
        description: 'Kernel source URL'
        required: true
        default: 'https://github.com/muhdhaniff55/kernel_xiaomi_vayu_upstream.git'
      KERNEL_BRANCH:
        description: 'Kernel branch'
        required: true
        default: 'ksu'
      KERNEL_NAME:
        description: 'Kernel/zip name'
        required: true
        default: 'AnymoreKSU'
      CONFIG_FILE:
        description: 'Config file (You can put multiple configs separated by space)'
        required: true
        default: 'vayu_defconfig'
      TOOLCHAIN_URL:
        description: "Clone URL of your toolchain including branch"
        required: true
        default: 'https://gitlab.com/crdroidandroid/android_prebuilts_clang_host_linux-x86_clang-r536225.git -b 15.0'
      ANYKERNEL:
        description: "Clone URL of your AnyKernel including branch"
        required: true
        default: 'https://github.com/AnymoreProject/AnyKernel3.git -b master'

jobs:
  Kernel:
    runs-on: ubuntu-latest
    permissions: write-all
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}

    steps:
      - name: Set up environment
        run: |
          sudo apt-get update && sudo apt-get install -y \
            build-essential bc lld gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
            libssl-dev libfl-dev llvm curl git wget unzip tar jq

      - name: Cloning Kernel Source
        run: git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_BRANCH }} .

      - name: Cloning or Extracting Toolchain
        run: |
          TOOLCHAIN_URL=${{ github.event.inputs.TOOLCHAIN_URL }}
          FILE_NAME=$(basename "$TOOLCHAIN_URL")
          if [[ $TOOLCHAIN_URL == *.tar.gz || $TOOLCHAIN_URL == *.tar.bz2 || $TOOLCHAIN_URL == *.zip ]]; then
            curl -L "$TOOLCHAIN_URL" -o "$FILE_NAME" && \
            case "$FILE_NAME" in
              *.tar.gz) tar -xzf "$FILE_NAME" -C . ;;
              *.tar.bz2) tar -xjf "$FILE_NAME" -C . ;;
              *.zip) unzip "$FILE_NAME" -d . ;;
            esac
          else
            git clone --single-branch --depth=1 --no-tags "$TOOLCHAIN_URL" ./toolchain
          fi

      - name: Set up Cache
        id: cache-out
        uses: actions/cache@v4.0.2
        with:
          path: ${{ github.workspace }}/out
          key: ${{ github.event.inputs.KERNEL_SOURCE }}-out-

      - name: Start Compilation
        run: |
          objdir="./out"
          anykernel="./anykernel"
          clang_dir="./toolchain"
          kernel_name="${{ github.event.inputs.KERNEL_NAME }}"
          zip_name="${kernel_name}-$(date +"%d-%m-%Y").zip"
          arch="arm64"
          export PATH="${clang_dir}/bin:$PATH"

          make -s ARCH=${arch} O=${objdir} ${{ github.event.inputs.CONFIG_FILE }} -j$(nproc --all)
          make -j$(nproc --all) O=${objdir} ARCH=${arch} CC=clang CROSS_COMPILE=aarch64-linux-gnu- \
              CROSS_COMPILE_ARM32=arm-linux-gnueabi- AR=llvm-ar LLVM_NM=llvm-nm \
              OBJCOPY=llvm-objcopy LD=ld.lld NM=llvm-nm LLVM=1 LLVM_IAS=1

          cd "${objdir}"
          if [[ -f "arch/arm64/boot/Image" && -f "arch/arm64/boot/dtbo.img" ]]; then
            git clone -q ${{ github.event.inputs.ANYKERNEL }} "$anykernel"
            cp "arch/arm64/boot/Image" "${{ github.workspace }}"
            cp "arch/arm64/boot/dtbo.img" "${{ github.workspace }}"
            [[ -d "arch/arm64/boot/dts/vendor/qcom" ]] && cp arch/arm64/boot/dts/vendor/qcom/*.dtb "${{ github.workspace }}"

            mv -f "arch/arm64/boot/Image" "$anykernel/Image"
            mv -f "arch/arm64/boot/dtbo.img" "$anykernel/dtbo.img"
            cd "$anykernel"
            zip -r AnyKernel.zip *
            mv "AnyKernel.zip" "${{ github.workspace }}/$zip_name"
          else
            echo "ERROR: Kernel compilation failed!"
            exit 1
          fi

          # Set-up file info
          echo "ZIP_FILE=${{ github.workspace }}/$zip_name" >> $GITHUB_ENV
          echo "ZIP_NAME=$(basename "$zip_name" .zip)" >> $GITHUB_ENV
          echo "RELEASE_DATE=$(date +'%B %-d, %Y %H:%M')" >> $GITHUB_ENV
          echo "DTBO=${{ github.workspace }}/dtbo.img" >> $GITHUB_ENV
          echo "IMAGE=${{ github.workspace }}/Image" >> $GITHUB_ENV

      - name: Upload files to repository releases page
        uses: softprops/action-gh-release@v2.0.8
        with:
          files: |
            ${{ github.workspace }}/*.dtb
            ${{ env.ZIP_FILE }}
            ${{ env.DTBO }}
            ${{ env.IMAGE }}
          name: ${{ env.ZIP_NAME }}
          tag_name: ${{ github.run_id }}
          body: |
            Released on ${{ env.RELEASE_DATE }}
