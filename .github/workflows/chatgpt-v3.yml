name: ChatGPT V3
on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE:
        description: 'Kernel source URL'
        required: true
        default: 'https://github.com/AnymoreProject/kernel_xiaomi_vayu_upstream.git'
      KERNEL_BRANCH:
        description: 'Kernel branch'
        required: true
        default: 'ksu'
      KERNEL_NAME:
        description: 'Kernel/zip name'
        required: true
        default: 'AnymoreKSU'
      CONFIG_FILE:
        description: 'Config file (multiple configs can be separated by space)'
        required: true
        default: 'vayu_defconfig'
      TOOLCHAIN_URL:
        description: 'Toolchain URL including branch'
        required: true
        default: 'https://gitlab.com/crdroidandroid/android_prebuilts_clang_host_linux-x86_clang-r536225.git -b 15.0'
      ANYKERNEL:
        description: 'AnyKernel URL including branch'
        required: true
        default: 'https://github.com/AnymoreProject/AnyKernel3.git -b master'

jobs:
  Kernel:
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment
        run: |
          sudo apt-get update && sudo apt-get install -y \
          build-essential bc lld gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
          libssl-dev libfl-dev llvm curl git wget ccache python2 zip unzip

      - name: Clone Kernel Source
        run: |
          git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_BRANCH }} ${{ github.workspace }}

      - name: Set Up Toolchain
        run: |
          TOOLCHAIN_DIR="${{ github.workspace }}/toolchain"
          mkdir -p "${TOOLCHAIN_DIR}"
          if [[ "${{ github.event.inputs.TOOLCHAIN_URL }}" == *.tar.gz ]]; then
            wget -O "${TOOLCHAIN_DIR}/toolchain.tar.gz" "${{ github.event.inputs.TOOLCHAIN_URL }}"
            tar -xzf "${TOOLCHAIN_DIR}/toolchain.tar.gz" -C "${TOOLCHAIN_DIR}" --strip-components=1
          elif [[ "${{ github.event.inputs.TOOLCHAIN_URL }}" == *.zip ]]; then
            wget -O "${TOOLCHAIN_DIR}/toolchain.zip" "${{ github.event.inputs.TOOLCHAIN_URL }}"
            unzip -d "${TOOLCHAIN_DIR}" "${TOOLCHAIN_DIR}/toolchain.zip"
          else
            git clone --single-branch --depth=1 --no-tags "${{ github.event.inputs.TOOLCHAIN_URL }}" "${TOOLCHAIN_DIR}"
          fi

      - name: Compile Kernel
        run: |
          objdir="${{ github.workspace }}/out"
          clang_dir="${{ github.workspace }}/toolchain"
          export PATH="${clang_dir}/bin:$PATH"
          make -s ARCH=arm64 O=${objdir} "${{ github.event.inputs.CONFIG_FILE }}" -j$(nproc --all)
          make -j$(nproc --all) O=${objdir} ARCH=arm64 CC=clang CROSS_COMPILE=aarch64-linux-gnu- || exit 1

          # Handle AnyKernel
          anykernel="${{ github.workspace }}/anykernel"
          git clone -q "${{ github.event.inputs.ANYKERNEL }}" "$anykernel"
          cp "${objdir}/arch/arm64/boot/Image" "${{ github.workspace }}"
          cp "${objdir}/arch/arm64/boot/dtbo.img" "${{ github.workspace }}"
          mv "${objdir}/arch/arm64/boot/Image" "$anykernel/Image"
          mv "${objdir}/arch/arm64/boot/dtbo.img" "$anykernel/dtbo.img"
          cd "$anykernel" && zip -r AnyKernel.zip * && mv AnyKernel.zip "${{ github.workspace }}/${{ github.event.inputs.KERNEL_NAME }}-$(date +"%d-%m-%Y").zip"

      - name: Upload Release
        uses: softprops/action-gh-release@v2.0.8
        with:
          files: |
            ${{ github.workspace }}/*.zip
            ${{ github.workspace }}/*.dtb
          name: ${{ github.event.inputs.KERNEL_NAME }}
          tag_name: ${{ github.run_id }}
          body: |
            Released on $(TZ='Asia/Kuala_Lumpur' date +'%B %-d, %Y %H:%M')
